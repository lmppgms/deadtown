<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_speed = 7
body_number = 50
body_length = 35
body_angle_max = 18
move_position = 0

for(i=0; i&lt;body_number+1; i++)
{
    body_x[i] = x
    body_y[i] = y
}

alpha = 1
alpha_speed = 0.1

catch = 0

type = 0 // 0 :normal 1:bloody 2:poison

pull_speed = 7
blood_speed = 0.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if point_distance(body_x[body_number],body_y[body_number],xstart,ystart) &gt; 0
{
    if 0&lt;alpha
    {
        alpha -= alpha_speed
    }
    else
    {
        instance_destroy()
    }
}
else
{
    if catch == 0
    {
        move_position += move_speed
        
        if body_length &lt;= move_position
        {
            move_position -= body_length
            for(i=body_number; 1&lt;=i; i--)
            {
                body_x[i] = body_x[i-1]
                body_y[i] = body_y[i-1]
            }
            
            bangle = point_direction(body_x[2],body_y[2],body_x[1],body_y[1])
            if point_distance(body_x[2],body_y[2],body_x[1],body_y[1]) == 0
            {bangle = point_direction(xstart,ystart,obj_player.x,obj_player.y)}
            
            go_dir = 0
            
            if angle_difference(bangle,point_direction(x,y,obj_player.x,obj_player.y))&lt;0
            {go_dir = body_angle_max}
            if angle_difference(bangle,point_direction(x,y,obj_player.x,obj_player.y))&gt;0
            {go_dir = -body_angle_max}
            
            if abs(angle_difference(bangle,point_direction(x,y,obj_player.x,obj_player.y))) &lt; body_angle_max
            {go_dir = point_direction(x,y,obj_player.x,obj_player.y)-bangle}
            
            body_x[0] += lengthdir_x(body_length,bangle+go_dir)
            body_y[0] += lengthdir_y(body_length,bangle+go_dir)
        }
        x = body_x[0]
        y = body_y[0]
    }
    else
    {
        for(i=body_number-1; 0&lt;=i; i--)
        {
            dir = point_direction(xstart,ystart,obj_player.x, obj_player.y)
            dis = point_distance(xstart,ystart,obj_player.x, obj_player.y)
            
            body_x[i] = xstart + lengthdir_x(dis*i/body_number,dir)
            body_y[i] = ystart + lengthdir_y(dis*i/body_number,dir) 
        }
        
        go_dir = point_direction(obj_player.x, obj_player.y, xstart, ystart)
        go_x = lengthdir_x(pull_speed,go_dir)
        go_y = lengthdir_y(pull_speed,go_dir)

        with(obj_player)
        {
            if !place_meeting(x+other.go_x,y+other.go_y,par_solid) and !place_meeting(x+other.go_x,y+other.go_y,par_action)
            {
                x += other.go_x
                y += other.go_y
            }
        }
        
        if type == 0
        {
            obj_player.hp -= blood_speed/2
        }
        if type == 1
        {
            obj_player.hp -= blood_speed
            if instance_exists(obj_boss2)
            {
                obj_boss2.hp += blood_speed*100
            }
        }
        if type == 2
        {
            obj_player.hp -= blood_speed/2
            obj_player.buff_poison += 30*2
        }
        
        if 0&lt;alpha
        {
            alpha -= alpha_speed/2
        }
        else
        {
            instance_destroy()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// catch
if point_distance(body_x[0],body_y[0],obj_player.x, obj_player.y) &lt; body_length/2
{
    if catch == 0
    {
        catch = 1
        
        dd = point_direction(x,y,obj_player_body.x,obj_player_body.y)
        particle_burst(sys_particle.p_part_blood_player,x,y,dd,10,4)
        particle_burst_up(sys_particle.p_part_blood_up_player,x,y,dd,10,4)
        
        if obj_player.buff_painkiller
        {
            view_a_move = choose(-1,1)*random_range(5,8)
            view_effect_position(5)
            view_effect_closeup(50)
        }
        else
        {
            view_a_move = choose(-1,1)*random_range(8,11)
            view_effect_position(7)
            view_effect_closeup(60)
        }
        
        view_effect_angle_plus(view_a_move)
        with(obj_player){audio_play(snd_hit2)}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=body_number-1; 0&lt;=i; i--)
{
    dir = point_direction(body_x[i+1],body_y[i+1],body_x[i],body_y[i])
    if dir == 0
    {dir = point_direction(xstart,ystart,obj_player.x,obj_player.y)}
        
    xx = body_x[i+1] + lengthdir_x(move_position,dir)
    yy = body_y[i+1] + lengthdir_y(move_position,dir)
    
    if point_distance(xx,yy,xstart,ystart) &gt; body_length
    {
        if i%2
        {
            draw_sprite_ext(spr_boss2_arm,0,xx,yy,1,1,dir,c_white,alpha)
        }
        else
        {
            draw_sprite_ext(spr_boss2_arm,type,xx,yy,1,1,dir,c_white,alpha)
        }
    }
}
draw_sprite_ext(spr_boss2_arm,3,xx,yy,1,1,dir,c_white,alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
