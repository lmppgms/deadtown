<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>par_light</parentName>
  <maskName>mask_64_64</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length = max(sprite_get_height(mask_index),sprite_get_width(mask_index))

//--------------// light //--------------//
light_type = 2
light_power = 300
light_color = c_white
light_angle = 0

move_speed = 5

move_around_angle = random(360)
move_around_direction = choose(1,-1)
move_around_speed = 1
move_around_radius = 300
move_around_radius_day = 400
move_around_time = 30*10
alarm[0] = irandom_range(move_around_time,move_around_time*2)

distance_min = 300
distance_max = 500

shake = 0
shake_x = 0
shake_y = 0

my_angle = 0
my_angle_speed = 1

my_light_angle_speed = 3
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// outline
outline_sprite = outline_drone
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
audio_init()
audio_index = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
audio_free()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_around_angle = random(360)
move_around_direction = choose(1,-1)
alarm[0] = irandom_range(move_around_time,move_around_time*2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move
move_around_angle += move_around_speed*move_around_direction

mar = move_around_radius
if 6 &lt; sys_spawn_time_light.day_time and sys_spawn_time_light.day_time &lt; 18
{
    mar = move_around_radius_day
}
go_x = obj_player.x + lengthdir_x(mar,move_around_angle)
go_y = obj_player.y + lengthdir_y(mar,move_around_angle)

dis = point_distance(x,y,go_x,go_y)
if dis &gt; distance_max
{
    sp = dis/100+move_speed
}
else
{
    sp = move_speed
}

if sp&lt;point_distance(x,y,go_x,go_y)
{
    dd = point_direction(x,y,go_x,go_y)
    x += lengthdir_x(sp,dd)
    y += lengthdir_y(sp,dd)
}
else
{
    x = go_x
    y = go_y
}


//light_angle = point_direction(x,y,obj_player.x, obj_player.y)
ins = instance_nearest(obj_player.x, obj_player.y, par_zombie)
target_angle = point_direction(x,y,obj_player.x, obj_player.y)
if instance_exists(ins)
{
    target_angle = point_direction(x,y,ins.x, ins.y)
}

if my_light_angle_speed&lt;abs(angular_gap(light_angle,target_angle))
{
    if angular_gap(light_angle,target_angle) &lt; 0
    {light_angle -= my_light_angle_speed}
    if angular_gap(light_angle,target_angle) &gt; 0
    {light_angle += my_light_angle_speed}
}
else
{
    light_angle = target_angle
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///image
if 0 &lt; point_distance(xprevious, yprevious, x, y)
{
    if angular_gap(image_angle,point_direction(xprevious, yprevious, x, y)) &lt; 0
    {image_angle -= my_angle_speed}
    if angular_gap(image_angle,point_direction(xprevious, yprevious, x, y)) &gt; 0
    {image_angle += my_angle_speed}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shake
if 0&lt;shake
{
    shake -= 1
}
else
{
    shake = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
audio_update()
if sys_spawn_time_light.day_time &gt; 19 or sys_spawn_time_light.day_time &lt; 6
{
    if !audio_is_playing(audio_index)
    {
        audio_index = audio_play_sound_on(emitter, snd_drone_wings, 1, 0);
    }
}
else
{
    if audio_is_playing(audio_index)
    {
        audio_stop_sound(audio_index);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake_x = random_range(-shake,shake)/2
shake_y = random_range(-shake,shake)/2

xx = x
yy = y
if 6 &lt; sys_spawn_time_light.day_time and sys_spawn_time_light.day_time &lt; 18
{
    xx = x + lengthdir_x(10,sys_spawn_time_light.day_time/24*360-180-45)
    yy = y + lengthdir_y(10,sys_spawn_time_light.day_time/24*360-180-45)
}
else
{
    dir = point_direction(obj_player.x, obj_player.y, x, y)
    
    xx = x + lengthdir_x(10,dir)
    yy = y + lengthdir_y(10,dir)
}

draw_sprite_ext(sprite_index,image_index,xx+shake_x,yy+shake_y,image_xscale,image_yscale,image_angle,c_black,0.5)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_sprite_ext(sprite_index,-1,x+shake_x,y+shake_y,1,1,image_angle,c_white,image_alpha)
draw_sprite_ext(spr_lightaction_move,0,x+random_range(-shake,shake)/2,y+random_range(-shake,shake)/2,1,1,light_angle,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
