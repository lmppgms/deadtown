<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trap_electric</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>30</depth>
  <persistent>0</persistent>
  <parentName>par_action</parentName>
  <maskName>mask_24_24</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 400
hp_max = 400

length = max(sprite_get_height(mask_index),sprite_get_width(mask_index))

particle = sys_particle.p_part_iron_up

electric_relaunch_time = 20
electric_relaunch_time_count = 0
electric_damage = 10
electric_range = 200

electric_number = 0

light_obj = noone

line_length = global.line_length
line_type = choose(0,1,2,3)

line_color = make_color_rgb(220,220,40)

electric_usage = 0.1
activated = 0

shake = 0
shake_x = 0
shake_y = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// outline
outline_sprite = outline_trap_electric
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
audio_init()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
audio_free()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///activate
activated = 0
ins = instance_nearest(x,y,obj_bettery)
if ins != noone
{
    if point_distance(x,y,ins.x,ins.y) &lt; line_length
    {
        if electric_usage &lt;= ins.electricity
        {
            ins.electricity -= electric_usage
            activated = 1
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &lt; 0)
{
    particle_burst_up(particle,x,y,0,180,10)
    instance_destroy()
    if instance_exists(light_obj)
    {
        with (light_obj)
        {
            instance_destroy()
        }
    }
}

if 0&lt;electric_relaunch_time_count
{
    electric_relaunch_time_count -= 1
}

if light_obj == noone
{
    light_obj = instance_create(x,y,obj_light)
    light_obj.light_type = 1
    light_obj.light_power = 200
    light_obj.light_color = c_white
}
else if instance_exists(light_obj)
{
    if 0 &lt; electric_relaunch_time_count/electric_relaunch_time
    {
        light_obj.light_type = 1
        light_obj.light_power = 300*max(electric_relaunch_time_count/electric_relaunch_time,0.5)
    }
    else
    {
        light_obj.light_type = 0
        if activated
        {
            light_obj.light_type = 1
            light_obj.light_power = 200
        }
    }
}



if activated
{
    ins = instance_nearest(x,y,par_zombie)
    if ins != noone
    {
        dis = point_distance(x,y,ins.x,ins.y)
        dir = point_direction(x,y,ins.x,ins.y)
        if dis &lt; electric_range
        {
            if electric_relaunch_time_count &lt;= 0
            {
                electric_relaunch_time_count = electric_relaunch_time
                
                audio_play(snd_stun_gun)
                
                ins.hp -= damage_cal(electric_damage)
                
                electric_number = floor(dis/10)
                for(i=0;i&lt;electric_number;i++)
                {
                    r_dis[i] = random(1)*dis
                }
                
                electric_number += 1
                r_dis[electric_number-1] = 0
                
                for(i=0;i&lt;electric_number-1;i++)
                {
                    for(j=0;j&lt;electric_number - 1 - i;j++)
                    {
                        if (r_dis[j] &gt; r_dis[j+1])
                        {
                            hold = r_dis[j]
                            r_dis[j] = r_dis[j+1]
                            r_dis[j+1] = hold
                        }
                    }
                }
                
                for(i=0;i&lt;electric_number;i++)
                {
                    electric_x[i] = x+lengthdir_x(r_dis[i],dir + random_range(4,8)*choose(-1,1)) + random_range(-3,3)
                    electric_y[i] = y+lengthdir_y(r_dis[i],dir + random_range(4,8)*choose(-1,1)) + random_range(-3,3)
                }
                
                electric_number += 1
                electric_x[electric_number-1] = ins.x
                electric_y[electric_number-1] = ins.y
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shake
if 0&lt;shake
{
    shake -= 1
}
else
{
    shake = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///audio
audio_update()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// inherited
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ins = instance_nearest(x,y,obj_bettery)
if ins != noone
{
    dis = point_distance(x,y,ins.x,ins.y)
    if dis &lt; line_length
    {
        dir = point_direction(x,y,ins.x,ins.y)
        if electric_usage &lt;= ins.electricity
        {
            draw_sprite_ext(spr_electric_line,line_type,x,y,dis/150,1,dir,c_white,1)
        }
        else
        {
            draw_sprite_ext(spr_electric_line_d,line_type,x,y,dis/150,1,dir,c_white,1)
        }
    }
}


draw_sprite_ext(sprite_index,-1,x+shake_x,y+shake_y,1,1,image_angle,c_white,image_alpha)

draw_set_color(line_color)
draw_set_alpha(electric_relaunch_time_count/electric_relaunch_time)
for(i=0;i&lt;electric_number-1;i++)
{
    draw_line_width(electric_x[i],electric_y[i],electric_x[i+1],electric_y[i+1],3)
}
draw_set_alpha(1)
draw_set_color(c_black)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
