<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>par_sys</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_colour_rgb(53,61,45))

for(w=0; w&lt;=floor(room_width/600); w++)
{
    xx = w*600
    yy = 0
    
    if point_distance(obj_player.x, obj_player.y, xx,yy) &lt; 1800
    {
        draw_rectangle(xx,-1200,xx+600,0,0)
        
        draw_sprite_ext(spr_map_border,0,xx,yy,1,1,-90,c_white,1)
    }
}

for(w=0; w&lt;=floor(room_width/600); w++)
{
    xx = w*600
    yy = room_height
    
    if point_distance(obj_player.x, obj_player.y, xx,yy) &lt; 1800
    {
        draw_rectangle(xx,room_height,xx+600,room_height+1200,0)
        
        draw_sprite_ext(spr_map_border,0,xx,yy,1,1,+90,c_white,1)
    }
}

for(h=0; h&lt;=floor(room_height/600)+1; h++)
{
    xx = 0
    yy = h*600
    
    if point_distance(obj_player.x, obj_player.y, xx,yy) &lt; 1800
    {
        draw_rectangle(-1200,yy,0,yy+600,0)
        
        if h == 0
        {draw_sprite_ext(spr_map_border,1,xx,yy,1,1,0,c_white,1)}
        else if h == floor(room_height/600)+1
        {draw_sprite_ext(spr_map_border,2,xx,yy,1,1,0,c_white,1)}
        else
        {draw_sprite_ext(spr_map_border,0,xx,yy,1,1,0,c_white,1)}
    }
}

for(h=0; h&lt;=floor(room_height/600)+1; h++)
{
    xx = room_width
    yy = h*600
    
    if point_distance(obj_player.x, obj_player.y, xx,yy) &lt; 1800
    {
        draw_rectangle(room_width,yy,room_width+1200,yy+600,0)
        
        if h == 0
        {draw_sprite_ext(spr_map_border,1,xx,yy,-1,1,0,c_white,1)}
        else if h == floor(room_height/600)+1
        {draw_sprite_ext(spr_map_border,2,xx,yy,-1,1,0,c_white,1)}
        else
        {draw_sprite_ext(spr_map_border,0,xx,yy,-1,1,0,c_white,1)}
    }
}

if point_distance(obj_player.x, obj_player.y, 0, 0)&lt;1800
{draw_rectangle(-1200,-1200,0,0,0)}
if point_distance(obj_player.x, obj_player.y, room_width, 0)&lt;1800
{draw_rectangle(room_width,-1200,room_width+1200,0,0)}
if point_distance(obj_player.x, obj_player.y, 0, room_height)&lt;1800
{draw_rectangle(-1200,room_height,0,room_height+1200,0)}
if point_distance(obj_player.x, obj_player.y, room_width, room_height)&lt;1800
{draw_rectangle(room_width,room_height,room_width+1200,room_height+1200,0)}

draw_set_color(c_black)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
