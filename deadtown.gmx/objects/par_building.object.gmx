<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// roof

xx = obj_player.x
yy = obj_player.y

if image_angle == 0 or image_angle= 180
{
    spr_w = sprite_get_width(sprite_index)*image_xscale
    spr_h = sprite_get_height(sprite_index)*image_yscale
}
else
{
    spr_w = sprite_get_height(sprite_index)*image_xscale
    spr_h = sprite_get_width(sprite_index)*image_yscale
}


if xx &gt; x-spr_w/2-90 and yy &gt; y-spr_h/2-90 and xx &lt; x+spr_w/2+90 and yy &lt; y+spr_h/2+90
{
    if roof_alpha &gt; 0
    {roof_alpha -= roof_alpha_speed*0.8}
    else
    {roof_alpha = 0}
}
else
{
    if roof_alpha &lt; 1
    {roof_alpha += roof_alpha_speed*0.8}
    else
    {roof_alpha = 1}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// item spawn
check = 0
for (i=0;i&lt;item_number;i++)
{
    if !instance_exists(item_ins[i])
    {
        check = 1
    }
}

if roof_alpha != 1
{check = 0}

if check
{
    if global.item_respawn_time &lt; ((sys_spawn_time_light.day_time - item_last_day_time) + (sys_spawn_time_light.day - item_last_day)*24)
    {     
        for(j=0; j&lt;instance_number(obj_item_building); j++)
        {
            ins = instance_find(obj_item_building,j)
            if (abs(ins.x-x)&lt; sprite_get_width(mask_index)/2 *4) and (abs(ins.y-y) &lt; sprite_get_height(mask_index)/2 *4)
            {
                with(ins)
                {instance_destroy()}
            }
        }
        
        for (i=0;i&lt;item_number;i++)
        {
            if !instance_exists(item_ins[i])
            {
                ran = db_spawn_random(building_type)
                
                get = 1
                if random_range(db_spawn_info_get(ran,3),db_spawn_info_get(ran,4)) &lt; 1
                {
                    if random(1)&lt;db_spawn_info_get(ran,3)
                    {get = 1}
                    else
                    {get = 0}
                }
                
                if get
                {
                    if image_angle == 0 or image_angle= 180
                    {
                        spr_w = sprite_get_width(sprite_index)*image_xscale
                        spr_h = sprite_get_height(sprite_index)*image_yscale
                    }
                    else
                    {
                        spr_w = sprite_get_height(sprite_index)*image_xscale
                        spr_h = sprite_get_width(sprite_index)*image_yscale
                    }
                    xx = random_range(x-spr_w/3,x+spr_w/3)
                    yy = random_range(y-spr_h/3,y+spr_h/3)
                    
                    if item_ins[i] != noone
                    {
                        if instance_exists(item_ins[i])
                        {
                            with(item_ins[i])
                            {instance_destroy()}
                        }
                    }
                    
                    item_ins[i] = instance_create(xx,yy,obj_item_building);
                    item_ins[i].item_type = db_spawn_info_get(ran,1)
                    item_ins[i].item_index = db_spawn_info_get(ran,2)
                    if db_spawn_info_get(ran,3) &lt; 1
                    {
                        item_ins[i].item_number = 1
                    }
                    else
                    {
                        item_ins[i].item_number = irandom_range(db_spawn_info_get(ran,3),db_spawn_info_get(ran,4))
                    }
                }
            }
        }
        
        item_last_day = sys_spawn_time_light.day
        item_last_day_time = sys_spawn_time_light.day_time
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
xx = x
yy = y
if 6 &lt; sys_spawn_time_light.day_time and sys_spawn_time_light.day_time &lt; 18
{
    xx = x + lengthdir_x(20,sys_spawn_time_light.day_time/24*360-180-45)
    yy = y + lengthdir_y(20,sys_spawn_time_light.day_time/24*360-180-45)
}
else
{
    dir = point_direction(obj_player.x, obj_player.y, x, y)
    
    xx = x + lengthdir_x(20,dir)
    yy = y + lengthdir_y(20,dir)
}

draw_sprite_ext(roof_sprite,0,xx,yy,image_xscale,image_yscale,image_angle,c_black,0.3*roof_alpha)


draw_sprite_ext(mask_index,0,x,y,image_xscale,image_yscale,image_angle,c_white,1)
draw_sprite_ext(roof_sprite,0,x,y,image_xscale,image_yscale,image_angle,roof_color,roof_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
